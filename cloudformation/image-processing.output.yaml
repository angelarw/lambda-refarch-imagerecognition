AWSTemplateFormatVersion: '2010-09-09'
Description: Backend for photo sharing reference architecture.
Transform: AWS::Serverless-2016-10-31
Resources:
  PhotoRepoS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - PUT
          - GET
          - POST
          - HEAD
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - ETag
  ImageMetadataDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: albumID
        AttributeType: S
      - AttributeName: imageID
        AttributeType: S
      - AttributeName: uploadTime
        AttributeType: N
      KeySchema:
      - AttributeName: imageID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '3'
        WriteCapacityUnits: '3'
      GlobalSecondaryIndexes:
      - IndexName: albumID-uploadTime-index
        KeySchema:
        - AttributeName: albumID
          KeyType: HASH
        - AttributeName: uploadTime
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '3'
          WriteCapacityUnits: '3'
  AlbumMetadataDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: albumID
        AttributeType: S
      - AttributeName: creationTime
        AttributeType: N
      - AttributeName: userID
        AttributeType: S
      KeySchema:
      - AttributeName: albumID
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '2'
        WriteCapacityUnits: '1'
      GlobalSecondaryIndexes:
      - IndexName: userID-creationTime-index
        KeySchema:
        - AttributeName: userID
          KeyType: HASH
        - AttributeName: creationTime
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '1'
  BackendProcessingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /MediaSharingRefarch/
      Policies:
      - PolicyName: LambdaWriteCWLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowLogging
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: ReadFromPhotoRepoS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: ReadFromPhotoRepoS3Bucket
            Effect: Allow
            Action:
            - s3:Get*
            Resource:
              Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
      - PolicyName: WriteToPhotoRepoS3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: WriteToPhotoRepoS3Bucket
            Effect: Allow
            Action:
            - s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
      - PolicyName: WriteToImageMetadataDDBTable
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: WriteToImageMetadataDDBTable
            Effect: Allow
            Action:
            - dynamodb:UpdateItem
            - dynamodb:PutItem
            Resource:
              Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}
      - PolicyName: RekognitionDetectLabels
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: RekognitionDetectLabels
            Effect: Allow
            Action:
            - rekognition:DetectLabels
            Resource: '*'
      - PolicyName: StepFunctionStartExecution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: StepFunctionStartExecution
            Effect: Allow
            Action:
            - states:StartExecution
            Resource: '*'
  ImageProcStartExecutionFunction:
    DependsOn: PhotoRepoS3Bucket
    Properties:
      CodeUri: s3://media-sharing-refarch/cloudformation/eaf8edb8d933f6825eb7d5948bbede38
      Description: Triggered by S3 image upload to the repo bucket and start the image
        processing step function workflow
      Handler: index.handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - BackendProcessingLambdaRole
        - Arn
      Environment:
        Variables:
          IMAGE_METADATA_DDB_TABLE:
            Ref: ImageMetadataDDBTable
          STATE_MACHINE_ARN:
            Ref: ImageProcStateMachine
      Runtime: nodejs12.x
      Timeout: 60
    Type: AWS::Serverless::Function
  ImageMagick:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:145266761615:applications/image-magick-lambda-layer
        SemanticVersion: 1.0.0
  ExtractImageMetadataFunction:
    Properties:
      CodeUri: s3://media-sharing-refarch/cloudformation/372bc4fd2c302f4dbe24cb4fe24e7b74
      Description: Extract image metadata such as format, size, geolocation, etc.
      Handler: index.handler
      MemorySize: 1024
      Timeout: 200
      Role:
        Fn::GetAtt:
        - BackendProcessingLambdaRole
        - Arn
      Runtime: nodejs12.x
      Layers:
      - Fn::GetAtt:
        - ImageMagick
        - Outputs.LayerVersion
    Type: AWS::Serverless::Function
  TransformMetadataFunction:
    Properties:
      CodeUri: s3://media-sharing-refarch/cloudformation/982cfdada63d75eb021c7bcf6135644f
      Description: massages JSON of extracted image metadata
      Handler: index.handler
      MemorySize: 256
      Timeout: 60
      Role:
        Fn::GetAtt:
        - BackendProcessingLambdaRole
        - Arn
      Runtime: nodejs12.x
    Type: AWS::Serverless::Function
  StoreImageMetadataFunction:
    Properties:
      CodeUri: s3://media-sharing-refarch/cloudformation/aab49129140e873c9f2fedfd8eec181e
      Description: Store image metadata into database
      Handler: index.handler
      MemorySize: 256
      Timeout: 60
      Role:
        Fn::GetAtt:
        - BackendProcessingLambdaRole
        - Arn
      Runtime: nodejs12.x
      Environment:
        Variables:
          IMAGE_METADATA_DDB_TABLE:
            Ref: ImageMetadataDDBTable
    Type: AWS::Serverless::Function
  RekognitionFunction:
    Properties:
      Description: Use Amazon Rekognition to detect labels from image
      Handler: index.handler
      MemorySize: 256
      Timeout: 60
      Role:
        Fn::GetAtt:
        - BackendProcessingLambdaRole
        - Arn
      Runtime: nodejs12.x
      CodeUri: s3://media-sharing-refarch/cloudformation/5ef4d8e832e7b4246926884e27c574e5
    Type: AWS::Serverless::Function
  GenerateThumbnailFunction:
    Properties:
      CodeUri: s3://media-sharing-refarch/cloudformation/dd7c532f9d6898131d052d3ad34d57a2
      Description: Generate thumbnails for images
      Handler: index.handler
      MemorySize: 1536
      Timeout: 300
      Role:
        Fn::GetAtt:
        - BackendProcessingLambdaRole
        - Arn
      Runtime: nodejs12.x
      Layers:
      - Fn::GetAtt:
        - ImageMagick
        - Outputs.LayerVersion
    Type: AWS::Serverless::Function
  CustomResourceHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /MediaSharingRefarch/
      Policies:
      - PolicyName: LambdaWriteCWLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowLogging
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: AddS3EventTrigger
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: PutS3EventNofication
            Effect: Allow
            Action:
            - s3:PutBucketNotification
            Resource:
              Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}
          - Sid: AddPermissionToLambda
            Effect: Allow
            Action:
            - lambda:AddPermission
            Resource: '*'
  CreateS3EventTriggerFunction:
    Properties:
      Description: Used with CloudFormation as a custom resource helper to enable
        S3 event trigger to invoke the start step function Lambda function.
      Handler: index.handler
      MemorySize: 1024
      Timeout: 200
      Role:
        Fn::GetAtt:
        - CustomResourceHelperRole
        - Arn
      CodeUri: s3://media-sharing-refarch/cloudformation/39f2f0ca88ebb52d0a9dab91c7f97936
      Runtime: nodejs12.x
    Type: AWS::Serverless::Function
  S3EventTrigger:
    Type: Custom::S3EventTrigger
    Version: '1.0'
    DependsOn:
    - PhotoRepoS3Bucket
    - ImageProcStartExecutionFunction
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CreateS3EventTriggerFunction
        - Arn
      PhotoRepoS3Bucket:
        Ref: PhotoRepoS3Bucket
      StartExecutionFunctionArn:
        Fn::GetAtt:
        - ImageProcStartExecutionFunction
        - Arn
      StartExecutionFunction:
        Ref: ImageProcStartExecutionFunction
      accountId:
        Ref: AWS::AccountId
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /MediaSharingRefarch/
      Policies:
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: InvokeLambda
            Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
  ImageProcStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"Image Processing workflow\",\n  \"StartAt\"\
          : \"ExtractImageMetadata\",\n  \"States\": {\n    \"ExtractImageMetadata\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ExtractImageMetadataFunction.Arn}\"\
          ,\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.extractedMetadata\"\
          ,\n      \"Next\": \"ImageTypeCheck\",\n      \"Catch\": [\n        {\n\
          \          \"ErrorEquals\": [\n            \"ImageIdentifyError\"\n    \
          \      ],\n          \"Next\": \"NotSupportedImageType\"\n        }\n  \
          \    ],\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n \
          \           \"ImageIdentifyError\"\n          ],\n          \"MaxAttempts\"\
          : 0\n        },\n        {\n          \"ErrorEquals\": [\n            \"\
          States.ALL\"\n          ],\n          \"IntervalSeconds\": 1,\n        \
          \  \"MaxAttempts\": 2,\n          \"BackoffRate\": 1.5\n        }\n    \
          \  ]\n    },\n    \"ImageTypeCheck\": {\n      \"Type\": \"Choice\",\n \
          \     \"Choices\": [\n        {\n          \"Or\": [\n            {\n  \
          \            \"Variable\": \"$.extractedMetadata.format\",\n           \
          \   \"StringEquals\": \"JPEG\"\n            },\n            {\n        \
          \      \"Variable\": \"$.extractedMetadata.format\",\n              \"StringEquals\"\
          : \"PNG\"\n            }\n          ],\n          \"Next\": \"TransformMetadata\"\
          \n        }\n      ],\n      \"Default\": \"NotSupportedImageType\"\n  \
          \  },\n    \"TransformMetadata\": {\n      \"Type\": \"Task\",\n      \"\
          Resource\": \"${TransformMetadataFunction.Arn}\",\n      \"InputPath\":\
          \ \"$.extractedMetadata\",\n      \"ResultPath\": \"$.extractedMetadata\"\
          ,\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n       \
          \     \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 1,\n\
          \          \"MaxAttempts\": 2,\n          \"BackoffRate\": 1.5\n       \
          \ }\n      ],\n      \"Next\": \"ParallelProcessing\"\n    },\n    \"NotSupportedImageType\"\
          : {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Image type not supported!\"\
          ,\n      \"Error\": \"FileTypeNotSupported\"\n    },\n    \"ParallelProcessing\"\
          : {\n      \"Type\": \"Parallel\",\n      \"Branches\": [\n        {\n \
          \         \"StartAt\": \"Rekognition\",\n          \"States\": {\n     \
          \       \"Rekognition\": {\n              \"Type\": \"Task\",\n        \
          \      \"Resource\": \"${RekognitionFunction.Arn}\",\n              \"Retry\"\
          : [\n                {\n                  \"ErrorEquals\": [\n         \
          \           \"States.ALL\"\n                  ],\n                  \"IntervalSeconds\"\
          : 1,\n                  \"MaxAttempts\": 2,\n                  \"BackoffRate\"\
          : 1.5\n                }\n              ],\n              \"End\": true\n\
          \            }\n          }\n        },\n        {\n          \"StartAt\"\
          : \"Thumbnail\",\n          \"States\": {\n            \"Thumbnail\": {\n\
          \              \"Type\": \"Task\",\n              \"Resource\": \"${GenerateThumbnailFunction.Arn}\"\
          ,\n              \"Retry\": [\n                {\n                  \"ErrorEquals\"\
          : [\n                    \"States.ALL\"\n                  ],\n        \
          \          \"IntervalSeconds\": 1,\n                  \"MaxAttempts\": 2,\n\
          \                  \"BackoffRate\": 1.5\n                }\n           \
          \   ],\n              \"End\": true\n            }\n          }\n      \
          \  }\n      ],\n      \"ResultPath\": \"$.parallelResults\",\n      \"Next\"\
          : \"StoreImageMetadata\"\n    },\n    \"StoreImageMetadata\": {\n      \"\
          Type\": \"Task\",\n      \"Resource\": \"${StoreImageMetadataFunction.Arn}\"\
          ,\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.storeResult\"\
          ,\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n       \
          \     \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 1,\n\
          \          \"MaxAttempts\": 2,\n          \"BackoffRate\": 1.5\n       \
          \ }\n      ],\n      \"End\": true\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
        - StateMachineRole
        - Arn
  DescribeExecutionFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /MediaSharingRefarch/
      Policies:
      - PolicyName: LambdaWriteCWLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AllowLogging
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: DescribeStepFunction
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: DescribeStepFunction
            Effect: Allow
            Action:
            - states:DescribeExecution
            Resource: '*'
  DescribeExecutionFunction:
    Properties:
      Description: Calls DescribeExecution on a state machine execution.
      Handler: index.handler
      MemorySize: 1024
      Timeout: 200
      Role:
        Fn::GetAtt:
        - DescribeExecutionFunctionRole
        - Arn
      CodeUri: s3://media-sharing-refarch/cloudformation/8fa5320970a514f68f398e01cb44d2eb
      Runtime: nodejs12.x
    Type: AWS::Serverless::Function
  TestClientIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: TestWebApp
      AllowUnauthenticatedIdentities: true
  TestClientIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: TestClientIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - TestClientIAMRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - TestClientIAMRole
          - Arn
  TestClientIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: S3PhotoRepoBucketAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: S3ReadWrite
            Effect: Allow
            Action:
            - s3:*
            Resource:
              Fn::Sub: arn:aws:s3:::${PhotoRepoS3Bucket}/*
      - PolicyName: DynamoTableAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: DynamoTableAccess
            Effect: Allow
            Action:
            - dynamodb:*
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AlbumMetadataDDBTable}
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AlbumMetadataDDBTable}/*
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ImageMetadataDDBTable}/*
      - PolicyName: InvokeDescribeExecutionLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: InvokeDescribeExecutionLambda
            Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DescribeExecutionFunction}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated:
            - cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRole
          - sts:AssumeRoleWithWebIdentity
Outputs:
  S3PhotoRepoBucket:
    Value:
      Ref: PhotoRepoS3Bucket
  DDBAlbumMetadataTable:
    Value:
      Ref: AlbumMetadataDDBTable
  DDBImageMetadataTable:
    Value:
      Ref: ImageMetadataDDBTable
  Region:
    Value:
      Ref: AWS::Region
  DescribeExecutionLambda:
    Value:
      Ref: DescribeExecutionFunction
  CognitoIdentityPool:
    Value:
      Ref: TestClientIdentityPool
