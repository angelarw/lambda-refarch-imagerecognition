version: 0.1
backend:
  phases:
    preBuild:
      commands:
        - npm install -g @aws-amplify/cli@latest
        - make init # install OS packages  and dev tools (awscli, sam-cli, linters, etc.)
    build:
      commands:
        - "# Execute Amplify CLI with the helper script"
        - echo "AWS Branch: ${AWS_BRANCH}"
        - echo "User Branch: ${USER_BRANCH}"
        - amplifyPush -e $AWS_BRANCH --simple
        ##
        # Extract Environment data
        ##
        - export STACK_NAME=$(jq -r '.providers.awscloudformation.StackName' ./amplify/#current-cloud-backend/amplify-meta.json)
        - export DEPLOYMENT_BUCKET_NAME=$(jq -r '.providers.awscloudformation.DeploymentBucketName' ./amplify/#current-cloud-backend/amplify-meta.json)
        - export AWS_DEFAULT_REGION=$(jq -r '.providers.awscloudformation.Region' amplify/#current-cloud-backend/amplify-meta.json)
        - export GRAPHQL_API_ID=$(jq -r '.api[(.api | keys)[0]].output.GraphQLAPIIdOutput' ./amplify/#current-cloud-backend/amplify-meta.json)
        - export APPSYNC_URL=$(jq -r '.api[(.api | keys)[0]].output.GraphQLAPIEndpointOutput' ./amplify/#current-cloud-backend/amplify-meta.json)
        - export GRAPHQL_API_ID=$(jq -r '.api[(.api | keys)[0]].output.GraphQLAPIIdOutput' ./amplify/#current-cloud-backend/amplify-meta.json)
        - export COGNITO_USER_POOL_ID=$(jq -r '.auth[(.auth | keys)[0]].output.UserPoolId' ./amplify/#current-cloud-backend/amplify-meta.json)
        - export COGNITO_USER_POOL_ARN=$(aws cognito-idp describe-user-pool --user-pool-id ${COGNITO_USER_POOL_ID} --query 'UserPool.Arn' --output text)
        - export COGNITO_USER_POOL_CLIENT_ID=$(jq -r '.auth[(.auth | keys)[0]].output.AppClientIDWeb' ./amplify/#current-cloud-backend/amplify-meta.json)
        - export PHOTO_BUCKET=$(jq -r '.storage[(.storage | keys)[0]].output.BucketName' ./amplify/#current-cloud-backend/amplify-meta.json)
        ##
        # Deploy SAM based back-end
        ##
        - make deploy
frontend:
  phases:
    preBuild:
      commands:
        - cd src/react-frontend
        - npm install
    build:
      commands:
        - npm run build
  artifacts:
    baseDirectory: src/react-frontend/build
    files:
      - "**/*"
  cache:
    paths:
      - node_modules/**/*
      - src/react-frontend/node_modules/**/*
#  customHeaders:
#    - pattern: "**/*"
#      headers: # https://infosec.mozilla.org/guidelines/web_security
#        - key: "Strict-Transport-Security"
#          value: "max-age=31536000; includeSubDomains"
#        - key: "X-Content-Type-Options"
#          value: "nosniff"
#        - key: "X-XSS-Protection"
#          value: "1; mode=block"
#        - key: "X-Frame-Options"
#          value: "DENY"
#        - key: "Referrer-Policy"
#          value: "same-origin"
#        - key: "Feature-Policy"
#          value: "microphone 'none'; camera 'none'; notifications 'self'"
#        # CSP generated using Laboratory: https://github.com/april/laboratory
#        # Caveats
#        ## Stripe Elements adds inline JS and iFrame (unsafe-eval, frame-src)
#        ## Allows any endpoint hosted on AWS - NOTE: Use custom domains for production
#        ### REST and GraphQL have random identifiers so we allow the sub-domain (connect-src)
#        ### connect-src doesn't parse cognito-idp.*.amazonaws.com used by Amplify Auth - for prod, use region(s) endpoint
#        - key: "Content-Security-Policy"
#          value: "'default-src 'none'; connect-src https://*.amazonaws.com; font-src 'self' https://fonts.gstatic.com; frame-src https://js.stripe.com; img-src 'self'; script-src 'self' 'unsafe-eval' https://js.stripe.com/v3/; style-src 'self' https://fonts.googleapis.com/css?family=Raleway 'unsafe-inline' https://fonts.googleapis.com'"
